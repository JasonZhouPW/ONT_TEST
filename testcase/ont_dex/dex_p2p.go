package ont_dex

import (
	"fmt"
	. "github.com/ONT_TEST/testframework"
	"github.com/Ontology/account"
	"github.com/Ontology/common"
	"github.com/Ontology/core/contract"
	"github.com/Ontology/smartcontract/types"
	"reflect"
)

func init() {
	fmt.Printf("-------> DexP2P CodeHash:%x Reverse:%x\n", DexP2P.CodeHash().ToArray(), DexP2P.CodeHash().ToArrayReverse())
}

var DexP2PCode = ""
var DexP2P = NewDexP2PContract()

type DexP2PContract struct{}

func NewDexP2PContract() *DexP2PContract {
	return &DexP2PContract{}
}

func (this *DexP2PContract) GetCode() string {
	return DexP2PCode
}

func (this *DexP2PContract) CodeHash() *common.Uint160 {
	c, _ := common.HexToBytes(this.GetCode())
	hashCode, _ := common.ToCodeHash(c)
	return &hashCode
}

func (this *DexP2PContract) Deploy(ctx *TestFrameworkContext) error {
	ctx.LogInfo("DexP2PContract Deploy")
	_, err := ctx.Ont.DeploySmartContract(ctx.OntClient.Account1,
		this.GetCode(),
		[]contract.ContractParameterType{contract.String, contract.Array},
		contract.ContractParameterType(contract.Array),
		"DexP2PContract",
		"1.0",
		"",
		"",
		"",
		types.NEOVM,
	)
	if err != nil {
		return fmt.Errorf("DeploySmartContract error:%s", err)
	}
	//等待出块
	//_, err = ctx.Ont.WaitForGenerateBlock(30*time.Second, 1)
	//if err != nil {
	//	return fmt.Errorf("WaitForGenerateBlock error:%s", err)
	//}
	return nil
}

func (this *DexP2PContract) Init(ctx *TestFrameworkContext, admin *account.Account, lockTime int) error {
	if lockTime == 0 {
		lockTime = 24 * 3600
	}
	res, err := ctx.Ont.InvokeSmartContract(
		admin,
		this.GetCode(),
		[]interface{}{"init", []interface{}{admin.ProgramHash.ToArray(), lockTime}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("DexP2PContract Init res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}

func (this *DexP2PContract) ChangeAdmin(ctx *TestFrameworkContext, admin, newAdmin *account.Account) error {
	res, err := ctx.Ont.InvokeSmartContract(
		admin,
		this.GetCode(),
		[]interface{}{"changeadmin", []interface{}{newAdmin.ProgramHash.ToArray()}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("DexP2PContract ChangeAdmin res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}

func (this *DexP2PContract) GetAdmin(ctx *TestFrameworkContext) (string, error) {
	res, err := ctx.Ont.InvokeSmartContract(
		ctx.OntClient.Admin,
		this.GetCode(),
		[]interface{}{"getadmin", []interface{}{}},
	)
	if err != nil {
		return "", fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("DexP2PContract GetAdmin res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return "", fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return "", fmt.Errorf("ErrorCode:%v", errorCode)
	}
	admin, err := GetRetValue(res, 1, reflect.String)
	if err != nil {
		return "", fmt.Errorf("GetRetValue error:%s", err)
	}
	return admin.(string), err
}

func (this *DexP2PContract) MakeBuyOrder(ctx *TestFrameworkContext,
	orderSig, orderId []byte,
	buyer, seller *account.Account,
	amount float64) error {
	buyerPk, err := buyer.PublicKey.EncodePoint(true)
	if err != nil {
		return fmt.Errorf("PublicKey.EncodePoint error:%s", err)
	}
	res, err := ctx.Ont.InvokeSmartContract(
		seller,
		this.GetCode(),
		[]interface{}{"makebuyorder", []interface{}{
			orderSig, orderId,
			buyer.ProgramHash.ToArray(),
			seller.ProgramHash.ToArray(),
			buyerPk, ctx.Ont.MakeAssetAmount(amount)}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("makeBuyOrder res:%v", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}

func (this *DexP2PContract) BuyOrderComplete(ctx *TestFrameworkContext, orderId []byte, buyer *account.Account) error {
	res, err := ctx.Ont.InvokeSmartContract(
		buyer,
		this.GetCode(),
		[]interface{}{"buyordercomplete", []interface{}{orderId, buyer.ProgramHash.ToArray()}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("buyOrderComplete res:%v", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}

func (this *DexP2PContract) BuyOrderCancel(ctx *TestFrameworkContext, orderId []byte, buyer *account.Account) error {
	res, err := ctx.Ont.InvokeSmartContract(
		buyer,
		this.GetCode(),
		[]interface{}{"buyordercancel", []interface{}{orderId, buyer.ProgramHash.ToArray()}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("BuyOrderCancel res:%v", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}

func (this *DexP2PContract) SellerTryCloseOrder(ctx *TestFrameworkContext, orderId []byte, seller *account.Account) error {
	res, err := ctx.Ont.InvokeSmartContract(
		seller,
		this.GetCode(),
		[]interface{}{"sellertrycloseorder", []interface{}{orderId, seller.ProgramHash.ToArray()}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("SellerTryCloseOrder res:%v", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}

	return nil
}

func (this *DexP2PContract) GetOrderLockTime(ctx *TestFrameworkContext) (int, error) {
	res, err := ctx.Ont.InvokeSmartContract(
		ctx.OntClient.Admin,
		this.GetCode(),
		[]interface{}{"getorderlocktime", []interface{}{}},
	)
	if err != nil {
		return 0, fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("DexP2PContract GetOrderLockTime res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return 0, fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return 0, fmt.Errorf("ErrorCode:%v", errorCode)
	}
	lockTime, err := GetRetValue(res, 1, reflect.Int)
	if err != nil {
		return 0, fmt.Errorf("GetRetValue error:%s", err)
	}
	ctx.LogInfo("DexP2PContract GetOrderLockTime:%v", lockTime)
	return lockTime.(int), err
}

func (this *DexP2PContract) SetOrderLockTime(ctx *TestFrameworkContext, admin *account.Account, newLockTime int) error {
	res, err := ctx.Ont.InvokeSmartContract(
		admin,
		this.GetCode(),
		[]interface{}{"changeadmin", []interface{}{newLockTime}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("DexP2PContract SetOrderLockTime res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}
