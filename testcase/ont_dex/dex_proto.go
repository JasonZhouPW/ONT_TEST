package ont_dex

import (
	"fmt"
	. "github.com/ONT_TEST/testframework"
	"github.com/Ontology/account"
	"github.com/Ontology/common"
	"github.com/Ontology/core/contract"
	"github.com/Ontology/smartcontract/types"
	"reflect"
	//"time"
)

func init() {
	fmt.Printf("-------> DexProto CodeHash:%x Reverse:%x\n", DexProto.CodeHash().ToArray(), DexProto.CodeHash().ToArrayReverse())
}

var DexProtoCode = ""
var DexProto = NewDexProto()

type DexProtoContract struct{}

func NewDexProto() *DexProtoContract {
	return &DexProtoContract{}
}

func (this *DexProtoContract) GetCode() string {
	return DexProtoCode
}

func (this *DexProtoContract) CodeHash() *common.Uint160 {
	c, _ := common.HexToBytes(this.GetCode())
	hashCode, _ := common.ToCodeHash(c)
	return &hashCode
}

func (this *DexProtoContract) Deploy(ctx *TestFrameworkContext) error {
	ctx.LogInfo("DexProtoContract Deploy")
	_, err := ctx.Ont.DeploySmartContract(ctx.OntClient.Account1,
		this.GetCode(),
		[]contract.ContractParameterType{contract.String, contract.Array},
		contract.ContractParameterType(contract.Array),
		"DexProtoContract",
		"1.0",
		"",
		"",
		"",
		types.NEOVM,
	)
	if err != nil {
		return fmt.Errorf("DeploySmartContract error:%s", err)
	}
	//等待出块
	//_, err = ctx.Ont.WaitForGenerateBlock(30*time.Second, 1)
	//if err != nil {
	//	return fmt.Errorf("WaitForGenerateBlock error:%s", err)
	//}
	return nil
}

func (this *DexProtoContract) Init(ctx *TestFrameworkContext, admin *account.Account, caller []byte) error {
	if caller == nil {
		caller = []byte("")
	}
	res, err := ctx.Ont.InvokeSmartContract(
		admin,
		this.GetCode(),
		[]interface{}{"init", []interface{}{admin.ProgramHash.ToArray(), caller}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("DexProtoContract Init Caller:%x", caller)
	ctx.LogInfo("dexProtoInit res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}

func (this *DexProtoContract) AddCaller(ctx *TestFrameworkContext, admin *account.Account, caller []byte) error {
	res, err := ctx.Ont.InvokeSmartContract(
		admin,
		this.GetCode(),
		[]interface{}{"addcaller", []interface{}{caller}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("addProtoCaller res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}

func (this *DexProtoContract) DeleteCaller(ctx *TestFrameworkContext, admin *account.Account, caller []byte) error {
	res, err := ctx.Ont.InvokeSmartContract(
		admin,
		this.GetCode(),
		[]interface{}{"deletecaller", []interface{}{caller}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("DeleteProtoCaller res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}

func (this *DexProtoContract) CheckCallerPermission(ctx *TestFrameworkContext, caller []byte) (bool, error) {
	res, err := ctx.Ont.InvokeSmartContract(
		ctx.OntClient.Admin,
		this.GetCode(),
		[]interface{}{"checkcallerpermisssion", []interface{}{caller}},
	)
	if err != nil {
		return false, fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("CheckCallerPermission res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return false, fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return false, fmt.Errorf("ErrorCode:%v", errorCode)
	}
	v, err := GetRetValue(res, 1, reflect.Bool)
	if err != nil {
		return false, fmt.Errorf("GetRetValue error:%s", err)
	}
	return v.(bool), nil
}

func (this *DexProtoContract) ChangeAdmin(ctx *TestFrameworkContext, admin, newAdmin *account.Account) error {
	res, err := ctx.Ont.InvokeSmartContract(
		admin,
		this.GetCode(),
		[]interface{}{"changeadmin", []interface{}{newAdmin.ProgramHash.ToArray()}},
	)
	if err != nil {
		return fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("DexProtoContract ChangeAdmin res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return fmt.Errorf("ErrorCode:%v", errorCode)
	}
	return nil
}

func (this *DexProtoContract) GetAdmin(ctx *TestFrameworkContext) (string, error) {
	res, err := ctx.Ont.InvokeSmartContract(
		ctx.OntClient.Admin,
		this.GetCode(),
		[]interface{}{"getadmin", []interface{}{}},
	)
	if err != nil {
		return "", fmt.Errorf("InvokeSmartContract error:%s", err)
	}
	ctx.LogInfo("DexProtoContract GetAdmin res:%s", res)
	errorCode, err := GetErrorCode(res)
	if err != nil {
		return "", fmt.Errorf("GetErrorCode error:%s", err)
	}
	if errorCode != 0 {
		return "", fmt.Errorf("ErrorCode:%v", errorCode)
	}
	admin, err := GetRetValue(res, 1, reflect.String)
	if err != nil {
		return "", fmt.Errorf("GetRetValue error:%s", err)
	}
	return admin.(string), err
}
